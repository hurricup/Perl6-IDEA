/* The following code was generated by JFlex 1.4.3 on 12.04.15 13:15 */

package com.perl6.lang.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12.04.15 13:15 from the specification file
 * <tt>C:/Repository/Perl6-IDEA/src/com/perl6/lang/lexer/Perl6.flex</tt>
 */
public class Perl6Lexer implements FlexLexer, Perl6TokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\2\0\1\4"+
    "\11\0\1\5\4\0\1\51\16\0\1\6\1\23\1\32\1\11\1\7"+
    "\1\0\1\54\1\56\1\55\1\0\1\57\1\53\1\42\1\10\1\44"+
    "\2\0\1\45\1\46\1\47\1\52\1\0\1\42\1\42\1\61\7\0"+
    "\1\34\1\31\1\33\1\24\1\13\1\40\1\15\1\17\1\25\1\60"+
    "\1\26\1\12\1\36\1\14\1\27\1\21\1\50\1\22\1\20\1\16"+
    "\1\43\1\37\1\35\1\41\1\30\1\42\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\37\1\1\3\1\4\7\0"+
    "\1\4\142\0\1\4\51\0\1\4\53\0\1\4\1\0"+
    "\1\4\3\0\1\4\17\0\1\4\16\0\1\4\12\0"+
    "\1\4\30\0\1\4\33\0\1\4\40\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\62\0\62\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068"+
    "\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u11f8\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166"+
    "\0\u2198\0\u21ca\0\u028a\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4"+
    "\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94"+
    "\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u0fd2\0\u2bf2"+
    "\0\u1482\0\u2c24\0\u2c56\0\u2c88\0\u1068\0\u2cba\0\u2cec\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae"+
    "\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e"+
    "\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e"+
    "\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u0abe\0\u34bc"+
    "\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c"+
    "\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc"+
    "\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u08ca"+
    "\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca"+
    "\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u047e\0\u3bc4\0\u3bf6\0\u3c28"+
    "\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8"+
    "\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48"+
    "\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8"+
    "\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268"+
    "\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8"+
    "\0\u442a\0\u445c\0\u448e\0\u44c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\2\1\40\4\2\1\41\1\2\1\42\2\2\1\43"+
    "\2\2\1\44\1\2\64\0\1\4\57\0\2\5\1\45"+
    "\57\5\6\0\1\46\3\0\2\46\1\0\2\46\1\0"+
    "\5\46\1\0\2\46\1\0\3\46\1\0\1\46\2\0"+
    "\10\46\64\0\1\47\17\0\1\50\60\0\1\51\65\0"+
    "\1\52\4\0\1\53\4\0\1\54\1\0\1\55\3\0"+
    "\1\56\1\57\41\0\1\60\12\0\1\61\4\0\1\62"+
    "\2\0\1\63\1\0\1\64\33\0\1\65\13\0\1\66"+
    "\44\0\1\67\1\70\6\0\1\71\4\0\1\72\6\0"+
    "\1\73\36\0\1\74\6\0\1\75\2\0\1\76\47\0"+
    "\1\77\60\0\1\100\1\101\2\0\1\102\1\103\1\0"+
    "\1\104\1\105\2\0\1\106\1\0\1\107\1\110\2\0"+
    "\1\111\1\112\6\0\1\113\4\0\1\114\33\0\1\115"+
    "\2\0\1\116\1\0\1\117\4\0\1\120\6\0\1\121"+
    "\31\0\1\122\11\0\1\123\6\0\1\124\1\0\1\125"+
    "\32\0\1\126\65\0\1\127\11\0\1\130\3\0\1\131"+
    "\11\0\1\132\32\0\1\133\12\0\1\134\45\0\1\135"+
    "\11\0\1\136\55\0\1\137\1\140\10\0\1\66\7\0"+
    "\1\141\30\0\1\142\7\0\1\143\2\0\1\144\112\0"+
    "\1\145\15\0\1\146\4\0\1\147\2\0\1\150\4\0"+
    "\1\151\4\0\1\152\37\0\1\153\3\0\1\154\12\0"+
    "\1\155\1\0\1\156\50\0\1\157\11\0\1\160\45\0"+
    "\1\161\5\0\1\125\1\0\1\46\3\0\1\162\40\0"+
    "\1\163\20\0\1\164\37\0\1\165\12\0\1\166\1\0"+
    "\1\167\3\0\1\170\42\0\1\171\1\0\1\172\1\0"+
    "\1\130\12\0\1\56\2\0\1\173\66\0\1\174\26\0"+
    "\1\175\61\0\1\176\100\0\1\177\101\0\1\200\23\0"+
    "\1\46\116\0\1\201\27\0\1\202\63\0\1\203\57\0"+
    "\1\204\3\0\1\205\56\0\1\46\15\0\1\206\66\0"+
    "\1\207\41\0\1\66\65\0\1\210\75\0\1\46\54\0"+
    "\1\211\62\0\1\212\40\0\1\163\11\0\1\213\75\0"+
    "\1\66\36\0\1\46\72\0\1\214\50\0\1\215\56\0"+
    "\1\162\64\0\1\216\61\0\1\172\55\0\1\217\112\0"+
    "\1\220\31\0\1\221\22\0\1\222\64\0\1\46\33\0"+
    "\1\71\60\0\1\223\1\224\1\140\1\0\1\225\17\0"+
    "\1\226\57\0\1\227\6\0\1\230\43\0\1\231\10\0"+
    "\1\232\4\0\1\233\30\0\1\234\7\0\1\235\73\0"+
    "\1\124\41\0\1\46\67\0\1\66\10\0\1\236\46\0"+
    "\1\237\15\0\1\240\57\0\1\241\55\0\1\46\62\0"+
    "\1\242\52\0\1\66\64\0\1\243\1\0\1\244\53\0"+
    "\1\130\60\0\2\46\73\0\1\204\46\0\1\211\55\0"+
    "\1\245\1\0\1\246\1\0\1\247\3\0\1\216\6\0"+
    "\1\250\1\251\1\252\1\0\1\253\1\46\7\0\1\254"+
    "\25\0\1\255\61\0\1\140\71\0\1\256\111\0\1\257"+
    "\17\0\1\260\25\0\1\261\34\0\1\46\104\0\1\262"+
    "\61\0\1\162\41\0\1\46\5\0\1\263\70\0\1\264"+
    "\56\0\1\155\43\0\1\212\62\0\1\265\72\0\1\46"+
    "\57\0\1\46\52\0\1\266\61\0\1\267\62\0\1\270"+
    "\54\0\1\271\101\0\1\272\54\0\1\273\1\0\1\256"+
    "\2\0\1\274\6\0\1\275\53\0\1\276\45\0\1\277"+
    "\3\0\1\46\53\0\1\300\103\0\1\301\61\0\1\302"+
    "\45\0\1\46\74\0\1\303\53\0\1\304\50\0\1\305"+
    "\5\0\1\106\2\0\1\306\51\0\1\307\65\0\1\46"+
    "\73\0\1\46\40\0\1\310\76\0\1\120\44\0\1\311"+
    "\71\0\1\312\53\0\1\264\57\0\1\313\3\0\1\314"+
    "\1\0\1\315\1\316\2\0\1\317\62\0\1\320\70\0"+
    "\1\321\54\0\1\322\107\0\1\323\61\0\1\324\31\0"+
    "\1\106\100\0\1\325\64\0\1\326\27\0\1\327\100\0"+
    "\1\66\53\0\1\46\51\0\1\330\77\0\1\331\52\0"+
    "\1\332\50\0\1\333\1\334\1\0\1\335\1\336\1\337"+
    "\57\0\1\46\54\0\1\46\65\0\1\46\1\0\1\340"+
    "\72\0\1\46\42\0\1\341\1\0\1\342\1\343\1\0"+
    "\1\344\1\345\1\346\11\0\1\46\55\0\1\46\44\0"+
    "\1\347\63\0\1\350\60\0\1\351\61\0\1\352\74\0"+
    "\1\347\47\0\1\333\1\334\1\0\1\335\1\353\1\354"+
    "\55\0\1\247\11\0\1\162\3\0\1\264\44\0\1\355"+
    "\67\0\1\112\75\0\1\66\36\0\1\247\4\0\1\356"+
    "\10\0\1\264\1\0\1\357\42\0\1\360\70\0\1\361"+
    "\61\0\1\362\62\0\1\363\51\0\1\364\1\0\1\365"+
    "\1\0\1\356\4\0\1\366\3\0\1\367\1\0\1\357"+
    "\36\0\1\313\61\0\1\370\67\0\1\371\55\0\1\372"+
    "\63\0\1\373\77\0\1\320\70\0\1\374\31\0\1\66"+
    "\105\0\1\46\46\0\1\375\62\0\1\376\47\0\1\377"+
    "\111\0\1\u0100\42\0\1\263\62\0\1\141\111\0\1\u0101"+
    "\17\0\1\304\73\0\1\u0102\63\0\1\366\3\0\1\u0103"+
    "\44\0\1\212\57\0\1\347\65\0\1\155\75\0\1\204"+
    "\51\0\1\46\11\0\1\u0104\55\0\1\u0105\47\0\1\u0106"+
    "\70\0\1\u0107\53\0\1\46\13\0\1\106\1\162\52\0"+
    "\1\140\53\0\1\66\54\0\1\223\57\0\1\u0108\71\0"+
    "\1\u0109\53\0\1\u010a\60\0\1\276\64\0\1\130\61\0"+
    "\1\u010b\61\0\1\u010c\60\0\1\247\2\0\1\124\1\0"+
    "\1\u010d\10\0\1\264\71\0\1\u010e\31\0\1\u010f\74\0"+
    "\1\46\7\0\1\u0110\50\0\1\u0111\61\0\1\130\53\0"+
    "\1\u0112\76\0\1\120\40\0\1\61\104\0\1\130\43\0"+
    "\1\204\57\0\1\u0113\112\0\1\u0114\61\0\1\46\65\0"+
    "\1\u0115\53\0\1\u0116\32\0\1\211\56\0\1\106\60\0"+
    "\1\u0117\71\0\1\57\52\0\1\u0118\70\0\1\u0119\66\0"+
    "\1\u011a\45\0\1\u011b\70\0\1\u011c\12\0\1\u0119\42\0"+
    "\1\155\72\0\1\u011d\45\0\1\u011e\70\0\1\u011f\66\0"+
    "\1\u0120\45\0\1\u0121\13\0\1\u0122\45\0\1\u0123\1\0"+
    "\1\u0124\3\0\1\u0125\1\u0126\12\0\1\u0127\57\0\1\u0128"+
    "\61\0\1\66\41\0\1\u011b\13\0\1\u0129\47\0\1\u0124"+
    "\4\0\1\u012a\12\0\1\u0119\37\0\1\u012b\70\0\1\157"+
    "\63\0\1\u012c\53\0\1\46\14\0\1\130\42\0\1\u012d"+
    "\60\0\1\u012e\61\0\1\u0109\61\0\1\u012f\67\0\1\330"+
    "\74\0\1\136\61\0\1\141\43\0\1\141\61\0\1\u0130"+
    "\72\0\1\u0131\54\0\1\106\51\0\1\u0132\6\0\1\u0133"+
    "\2\0\1\256\51\0\1\u0134\67\0\1\u0135\64\0\1\u0136"+
    "\44\0\1\46\65\0\1\u0137\57\0\1\u0138\76\0\1\u0139"+
    "\111\0\1\46\15\0\1\347\75\0\1\66\45\0\1\141"+
    "\104\0\1\46\74\0\1\46\44\0\1\u013a\46\0\1\u0125"+
    "\73\0\1\250\41\0\1\155\62\0\1\216\57\0\1\u013b"+
    "\21\0\1\66\41\0\1\204\72\0\1\231\47\0\1\u013c"+
    "\100\0\1\u013d\73\0\1\u013e\61\0\1\u013f\33\0\1\u0119"+
    "\56\0\1\u0140\66\0\1\u0118\63\0\1\u0141\66\0\1\u0142"+
    "\47\0\1\177\62\0\1\u0143\56\0\1\u0140\1\u0144\1\u0125"+
    "\64\0\1\u011e\63\0\1\u0145\72\0\1\u0146\41\0\1\u0147"+
    "\70\0\1\162\64\0\1\140\61\0\1\u0148\1\0\1\u0149"+
    "\45\0\1\u0140\1\u0144\26\0\1\u0125\52\0\1\304\60\0"+
    "\1\u014a\53\0\1\u0148\1\0\1\u0142\66\0\1\140\54\0"+
    "\1\u014b\50\0\1\61\61\0\1\u014c\56\0\1\204\64\0"+
    "\1\u014d\70\0\1\u014e\61\0\1\116\60\0\1\125\55\0"+
    "\1\130\63\0\1\130\52\0\1\140\75\0\1\u0135\56\0"+
    "\1\130\57\0\1\u014f\64\0\1\u0150\72\0\1\u0151\31\0"+
    "\1\50\134\0\1\46\14\0\1\66\104\0\1\u0119\40\0"+
    "\1\u0152\56\0\1\u0140\15\0\1\u0153\64\0\1\u0109\64\0"+
    "\1\u0154\50\0\1\u0155\55\0\1\u0156\66\0\1\u0157\50\0"+
    "\1\u0158\71\0\1\u0159\70\0\1\106\45\0\1\u015a\70\0"+
    "\1\116\45\0\1\u015b\67\0\1\u015c\53\0\1\130\60\0"+
    "\1\u015d\75\0\1\u0119\62\0\1\u015e\44\0\1\u0140\15\0"+
    "\1\u015f\44\0\1\245\12\0\1\276\46\0\1\245\67\0"+
    "\1\u0160\66\0\1\u0161\61\0\1\276\66\0\1\256\40\0"+
    "\1\46\12\0\1\46\67\0\1\112\43\0\1\u0162\57\0"+
    "\1\245\17\0\1\u0163\55\0\1\u0164\56\0\1\u0165\47\0"+
    "\1\u0140\15\0\1\u0166\64\0\1\46\51\0\1\u0167\51\0"+
    "\1\245\4\0\1\u0168\56\0\1\112\73\0\1\u0169\55\0"+
    "\1\141\64\0\1\114\46\0\1\u016a\101\0\1\320\6\0"+
    "\1\u016b\54\0\1\u016c\54\0\1\u0108\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\40\1\2\11\7\0\1\1"+
    "\142\0\1\1\51\0\1\1\53\0\1\1\1\0\1\1"+
    "\3\0\1\1\17\0\1\1\16\0\1\1\12\0\1\1"+
    "\30\0\1\1\33\0\1\1\40\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer string = new StringBuffer();


  public Perl6Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Perl6Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return P6_BAD_CHARACTER;
          }
        case 5: break;
        case 2: 
          { /* ignore */
          }
        case 6: break;
        case 3: 
          { yybegin(YYINITIAL); return P6_COMMENT;
          }
        case 7: break;
        case 4: 
          { return P6_BUILT_IN;
          }
        case 8: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
